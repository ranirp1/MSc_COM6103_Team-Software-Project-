Index: server/app.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from flask import Flask, request, jsonify\nfrom flask_sqlalchemy import SQLAlchemy\nfrom sqlalchemy.exc import IntegrityError\nfrom sqlalchemy.sql import func\nfrom sqlalchemy import text\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'mysql://root:12345@localhost:3306/test_db'\n# app.config['SQLALCHEMY_DATABASE_URI'] = 'mysql://root:your_password@127.0.0.0:3306/test_db'\ndb = SQLAlchemy(app)\n\n\nclass User(db.Model):\n    __tablename__ = 'user'\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    first_name = db.Column(db.String(30), unique=False, nullable=False)\n    last_name = db.Column(db.String(60), unique=False, nullable=False)\n    phoneNumber = db.Column(db.String(20), unique=False, nullable=False)\n    password = db.Column(db.String(120), nullable=False)\n    isStaff = db.Column(db.Boolean, default=False)\n    isAdmin = db.Column(db.Boolean, default=False)\n\n\n# Create the tables when Flask starts up\nwith app.app_context():\n    db.create_all()\n\n\n@app.route(\"/\")\ndef hello_world():\n    try:\n        db.session.execute(text(\"SELECT 1\"))\n        return 'Connection to MySQL is successful!'\n    except Exception as e:\n        return f'Error: {str(e)}'\n\n\n@app.route('/api/login', methods=['POST'])\ndef login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    user = User.query.filter_by(email=email).first()\n    if user and user.password == password:\n        return jsonify({'message': 'Login Successful'}), 200\n    else:\n        return jsonify({'message': 'Invalid Credentials'}), 401\n\n\n@app.route('/api/register', methods=['POST'])\ndef register():\n    data = request.json\n    email = data.get('email').lower()\n    first_name = data.get('first_name')\n    last_name = data.get('last_name')\n    phoneNumber = data.get('phoneNumber')\n    password = data.get('password')\n    acceptedTerms = data.get('terms')\n\n    # check for blank rows\n    if email == \"\" or first_name == \"\" or last_name == \"\" or phoneNumber == \"\" or password == \"\":\n        return jsonify({'message': 'Blank Data!'}), 409\n\n    # check for users who already exist\n    if User.query.filter_by(email=email).first():\n        return jsonify({'message': 'User with this email already exists'}), 409\n\n    # ensure user has accepted t&c's\n    if not acceptedTerms:\n        return jsonify({'message': 'You have not accepted Terms and Conditions'}), 409\n\n    # create the new user\n    newUser = User(\n        email=email,\n        first_name=first_name,\n        last_name=last_name,\n        password=password,\n        phoneNumber=phoneNumber,\n    )\n\n    # source:\n    # https://stackoverflow.com/a/16336401/11449502\n    try:\n        db.session.add(newUser)\n        db.session.commit()\n    except Exception as e:\n        db.session.rollback()\n        db.session.flush()\n        # code from https://en.wikipedia.org/wiki/List_of_HTTP_status_codes\n        return jsonify({'message': 'Database Error'}), 500\n    return jsonify({'message': 'Login Successful'}), 200\n\n\n@app.route('/api/getAllUsers', methods=['POST'])\ndef getAllUsers():\n    \"\"\"\n    Retrieve all users from the database and return them as JSON.\n\n    Returns:\n        A JSON response containing the serialized data of all users.\n    \"\"\"\n    users = User.query.all()\n    return jsonify([user.serialize() for user in users]), 200\n\n@app.route('/api/updateUserToStaff', methods=['POST'])\ndef updateUserToStaff():\n    \"\"\"\n    Update a user's status to staff.\n\n    Returns:\n        A JSON response with a success message if the user is found and updated successfully.\n        A JSON response with an error message and status code 404 if the user is not found.\n    \"\"\"\n    data = request.json\n    email = data.get('email')\n    user = User.query.filter_by(email=email).first()\n    if not user:\n        return jsonify({'message': 'User not found'}), 404\n    user.isStaff = True\n    db.session.commit()\n    return jsonify({'message': 'User updated to staff'}), 200\n\n@app.route('/api/updateUserToAdmin', methods=['POST'])\ndef updateUserToAdmin():\n    \"\"\"\n    Update a user's role to admin.\n    Args:\n        email (str): The email of the user to update.\n    Returns:\n        A JSON response with a success message if the user is successfully updated to admin.\n        A JSON response with an error message if the user is not found in the database.\n    \"\"\"\n    data = request.json\n    email = data.get('email')\n    user = User.query.filter_by(email=email).first()\n    if not user:\n        return jsonify({'message': 'User not found'}), 404\n    user.isAdmin = True\n    db.session.commit()\n    return jsonify({'message': 'User updated to admin'}), 200\n   
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/app.py b/server/app.py
--- a/server/app.py	(revision e562c7f12f1309532d6369f097c982b00767d54e)
+++ b/server/app.py	(date 1709586422554)
@@ -139,4 +139,4 @@
     user.isAdmin = True
     db.session.commit()
     return jsonify({'message': 'User updated to admin'}), 200
-   
\ No newline at end of file
+
